/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const ContactNewLazyImport = createFileRoute('/contact/new')()
const ContactIdLazyImport = createFileRoute('/contact/$id')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ContactNewLazyRoute = ContactNewLazyImport.update({
  id: '/contact/new',
  path: '/contact/new',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/contact.new.lazy').then((d) => d.Route))

const ContactIdLazyRoute = ContactIdLazyImport.update({
  id: '/contact/$id',
  path: '/contact/$id',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/contact.$id.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/contact/$id': {
      id: '/contact/$id'
      path: '/contact/$id'
      fullPath: '/contact/$id'
      preLoaderRoute: typeof ContactIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/contact/new': {
      id: '/contact/new'
      path: '/contact/new'
      fullPath: '/contact/new'
      preLoaderRoute: typeof ContactNewLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/contact/$id': typeof ContactIdLazyRoute
  '/contact/new': typeof ContactNewLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/contact/$id': typeof ContactIdLazyRoute
  '/contact/new': typeof ContactNewLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/contact/$id': typeof ContactIdLazyRoute
  '/contact/new': typeof ContactNewLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/contact/$id' | '/contact/new'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/contact/$id' | '/contact/new'
  id: '__root__' | '/' | '/contact/$id' | '/contact/new'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ContactIdLazyRoute: typeof ContactIdLazyRoute
  ContactNewLazyRoute: typeof ContactNewLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ContactIdLazyRoute: ContactIdLazyRoute,
  ContactNewLazyRoute: ContactNewLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/contact/$id",
        "/contact/new"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/contact/$id": {
      "filePath": "contact.$id.lazy.tsx"
    },
    "/contact/new": {
      "filePath": "contact.new.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
